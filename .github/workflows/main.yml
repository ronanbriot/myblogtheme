name: Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  node:
    name: Node ${{ matrix.node }}
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    strategy:
      matrix:
        node: ['20']

    steps:
      - name: Checkout the project
        uses: actions/checkout@v4

      - name: Setup the Node ${{ matrix.node }} environment on ${{ runner.os }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'yarn'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies using Yarn
        run: yarn install --frozen-lockfile

      - name: Build and compile assets
        run: |
          yarn build
          cat public/entrypoints.json
          cat public/manifest.json

  php:
    name: PHP ${{ matrix.php }}
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    strategy:
      matrix:
        php: ['8.1', '8.2']

    steps:
      - name: Checkout the project
        uses: actions/checkout@v4

      - name: Setup the PHP ${{ matrix.php }} environment on ${{ runner.os }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: xdebug
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore the Composer cache directory
        id: composercache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.php }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Run Pint
        run: vendor/bin/pint --test
        
  phpunit:
    name: Run tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.2', '8.0', '7.4']
    services:
      database:
        image: mysql:latest
        env:
          MYSQL_DATABASE: wordpress_tests
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
    steps:
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: $
          tools: phpunit-polyfills:1.1

      - name: Setup tests
        run: bash bin/install-wp-tests.sh wordpress_tests root root 127.0.0.1 latest true

      - name: Run tests
        run: phpunit
